#!/bin/bash

# Copyright 2016 Andreas Wilhelm
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SCRIPT_VERSION=16.05

SCREEN_RIGHT_OF=0
PRINT_COMMAND=0

# Define the usage text.
USAGE=$( cat <<EOF
Usage: `basename $0` [-hvrp]\n
-h|--help:
\tDisplays this help.
-v|--version
\tDisplays the current version of this script.
-r|--right-of
\tDisplays the second screen to the right of the first one.
-p|--print
\tPrint the generated command without executing it.
EOF
)

devices=($(xrandr | awk '/ connected/{print $1;}'))
resolutions=($(xrandr | awk '/ connected/{getline; print $1}'))

if [ ${#devices[@]} -lt 2 ]; then
  error "Error: You must connect more than one monitor."
fi

if [ ${#devices[@]} -ne ${#resolutions[@]} ]; then
  error "Error: Failed to detect maximum resolutions."
fi

# Function for messages.
function info() {
  echo -e "$*" >&2
  exit 0
}

function warning() {
  echo -e "$*" >&2
}

function error() {
  echo -e "$*" >&2
  exit 1
}

# Fetch command line options.
while [[ -n "${1+xxx}" ]]
do
  case "$1" in
    --help|-h)
      info "$USAGE"
      ;;
    --version|-v)
      info "`basename $0` Version $SCRIPT_VERSION"
      ;;
    --right-of|-r)
      SCREEN_RIGHT_OF=1
      shift
      ;;
    --print|-p)
      PRINT_COMMAND=1
      shift
      ;;
    -*)
      error "unrecognized option: $1\n\n$USAGE"
      ;;
    *)
      break
      ;;
  esac
done

command="xrandr"
numDevices=${#devices[@]}

for (( i=0; i<${numDevices}; i++ ));
do
  command="$command --output ${devices[$i]} --mode ${resolutions[$i]}"
done

if [ $SCREEN_RIGHT_OF == "1" ]; then
  command="$command --right-of ${devices[0]}"
else
  command="$command --left-of ${devices[0]}"
fi

if [ $PRINT_COMMAND == "1" ]; then
  info "Executing: $command"
fi

eval $command
