#!/bin/bash

## Tor-Buddy by AfterBurn @ NetSecNow
##
## http://learnnetsec.blogspot.com
##
## Upgrade for systems using systemd by Avedo @ Bornageek
## 
## http://www.bornageek.com

# Define the usage text
USAGE=$( cat <<EOF
USAGE: `basename $0` [-hv] [-s <seconds>]\n
-h|--help
\tDisplays this help.
-v|--version
\tDisplays the current version of this script.
-s|--seconds
\tTime interval to refresh IP (default: 300 seconds).
EOF
)

# All users with $UID 0 have root privileges.
ROOT_UID=0

# Define default time interval.
TIME=300

# Define some constants.
INIT_UNKOWN=-1
INIT_SYSTEMD=0
INIT_UPSTART=1
INIT_VINIT=2

# Message functions.
function notice() {
  echo -en "$*" >&2
}

function info() {
  echo -en "$*" >&2
  exit 0
}

function error() {
  echo -e "$*" >&2
  exit 1
}

# Fetch the used init system.
fetchInit() {
  if [[ `/sbin/init --version` =~ upstart ]]; then 
    echo $INIT_UPSTART
  elif [[ `systemctl` =~ -\.mount ]]; then 
    echo $INIT_SYSTEMD
  elif [[ -f /etc/init.d/cron && ! -h /etc/init.d/cron ]]; then 
    echo $INIT_VINIT
  else
    echo $INIT_UNKOWN
  fi
}

# Join array to string.
join() {
  local IFS="$1"
  shift
  echo "$*"
}

# Check if a given program is installed
haveProg() {
  which $1 &> /dev/null
}

# Callback for unexpected exit.
function cleanup {
  notice "\nGoodbye - Happy Hacking!\n"
  if [[ `fetchInit` -eq "$INIT_U" ]] ; then
    service tor stop
  elif [[ `fetchInit` -eq "$INIT_UPSTART" ]] ; then
    systemctl stop tor
  elif [[ `fetchInit` -eq "$INIT_VINIT" ]] ; then
    /etc/init.d/tor stop
  fi
  notice "Tor has been stopped. You are no longer proxied!\n"
  exit $?
}

# Check if user has root privilegues.
if [[ $EUID -ne $ROOT_UID ]]; then
  error "You have to execute this script as root!"
fi

# Declare a list of packages needed in order to use this script.
packages=('tor' 'proxychains')

# Generate a list of missing packages.
missing=()
cnt=${#packages[@]}
for ((i=0;i<cnt;i++)); do
  if ! haveProg "${packages[i]}"; then
    missing+=("${packages[i]}")
  fi
done

# Dump an error message for missing packages.
if [[ ${#missing[@]} -ne 0 ]] ; then
  missingStr=`join ' ' ${missing[@]}`
  error "The following packages are missing: $missingStr"
fi

# Fetch command line options.
while [[ -n "${1+xxx}" ]]
do
  case "$1" in
    --help|-h)
      info "$USAGE\n"
      ;;
    --version|-v)
      info "`basename $0` version 0.2\n"
      ;;
    --seconds|-s)
      shift
      TIME=$1

      re='^[0-9]+$'
      if ! [[ $TIME =~ $re ]] ; then
        error "Given time is not a number."
      fi
      shift
      ;;
    -*)
      error "unrecognized option: $1\n\n$USAGE"
      ;;
    *)
      break
      ;;
  esac
done

# Start the actual script.
notice "Tor-Buddy by AfterBurn @ NetSecNow http://learnnetsec.blogspot.com/\n\n"
notice "To stop script press CTRL+C\n"

notice "Starting Tor :-)\n"
if [[ `fetchInit` -eq "$INIT_UPSTART" ]] ; then
  service tor start
elif [[ `fetchInit` -eq "$INIT_SYSTEMD" ]] ; then
  systemctl start tor
elif [[ `fetchInit` -eq "$INIT_VINIT" ]] ; then
  /etc/init.d/tor start
fi

## Set timeout to restart ToR to change IP in Seconds.
if [[ "$TIME" -lt "30" ]]; then
  notice "WARN: Less than 30 seconds is not suggested due to timeout errors!\n"
  notice "We will do it anyway. If you have issues, restart script\n"
else
  notice "Setting up timer, standby...\n"
fi

# Capture SIGINT (Ctrl-C) and exit the script clean.
trap cleanup SIGINT

for (( ; ; ))
do 
  sleep $TIME
  if [[ `fetchInit` -eq "$INIT_UPSTART" ]] ; then
    service tor restart
  elif [[ `fetchInit` -eq "$INIT_SYSTEMD" ]] ; then
    systemctl restart tor
  elif [[ `fetchInit` -eq "$INIT_VINIT" ]] ; then
    /etc/init.d/tor restart
  fi
  notice "Tor restarted - $TIME seconds until next IP Change \n"
done
